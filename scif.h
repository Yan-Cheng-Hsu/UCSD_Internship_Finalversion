/** \mainpage Driver Overview
  *
  * \section section_drv_info Driver Information
  * This Sensor Controller Interface driver has been generated by the Texas Instruments Sensor Controller
  * Studio tool:
  * - <b>Project name</b>:     CC2650 with LMP Test
  * - <b>Project file</b>:     C:/ti/test_workspace/SunlightServiceApp/Application/lmp_test.scp
  * - <b>Code prefix</b>:      -
  * - <b>Operating system</b>: TI-RTOS
  * - <b>Tool version</b>:     2.4.0.793
  * - <b>Tool patches</b>:     1, 2, 3, 4 and 5
  * - <b>Target chip</b>:      CC2650, package QFN48 7x7 RGZ, revision -
  * - <b>Created</b>:          2019-08-29 15:32:51.881
  * - <b>Computer</b>:         DESKTOP-2MAQ27I
  * - <b>User</b>:             Tony Wu
  *
  * No user-provided resource definitions were used to generate this driver.
  *
  * No user-provided procedure definitions were used to generate this driver.
  *
  * Do not edit the generated source code files other than temporarily for debug purposes. Any
  * modifications will be overwritten by the Sensor Controller Studio when generating new output.
  *
  * \section section_drv_modules Driver Modules
  * The driver is divided into three modules:
  * - \ref module_scif_generic_interface, providing the API for:
  *     - Initializing and uninitializing the driver
  *     - Task control (for starting, stopping and executing Sensor Controller tasks)
  *     - Task data exchange (for producing input data to and consume output data from Sensor Controller
  *       tasks)
  * - \ref module_scif_driver_setup, containing:
  *     - The AUX RAM image (Sensor Controller code and data)
  *     - I/O mapping information
  *     - Task data structure information
  *     - Driver setup data, to be used in the driver initialization
  *     - Project-specific functionality
  * - \ref module_scif_osal, for flexible OS support:
  *     - Interfaces with the selected operating system
  *
  * It is possible to use output from multiple Sensor Controller Studio projects in one application. Only
  * one driver setup may be active at a time, but it is possible to switch between these setups. When
  * using this option, there is one instance of the \ref module_scif_generic_interface and
  * \ref module_scif_osal modules, and multiple instances of the \ref module_scif_driver_setup module.
  * This requires that:
  * - The outputs must be generated using the same version of Sensor Controller Studio
  * - The outputs must use the same operating system
  * - The outputs must use different source code prefixes (inserted into all globals of the
  *   \ref module_scif_driver_setup)
  *
  *
  * \section section_project_info Project Description
  * No description entered
  *
  *
  * \subsection section_io_mapping I/O Mapping
  * Task I/O functions are mapped to the following pins:
  * - cvTask:
  *     - <b>I2C SCL</b>: DIO4
  *     - <b>I2C SDA</b>: DIO28
  * - sampleADC:
  *     - <b>A: Input to ADC </b>: DIO27
  *
  *
  * \section section_task_info Task Description(s)
  * This driver supports the following task(s):
  *
  *
  * \subsection section_task_desc_cv_task cvTask
  * No description entered
  * 
  * 
  * \subsection section_task_desc_sample_adc sampleADC
  * No description entered
  *
  */




/** \addtogroup module_scif_driver_setup Driver Setup
  *
  * \section section_driver_setup_overview Overview
  *
  * This driver setup instance has been generated for:
  * - <b>Project name</b>:     CC2650 with LMP Test
  * - <b>Code prefix</b>:      -
  *
  * The driver setup module contains the generated output from the Sensor Controller Studio project:
  * - Location of task control and scheduling data structures in AUX RAM
  * - The AUX RAM image, and the size the image
  * - Task data structure information (location, size and buffer count)
  * - I/O pin mapping translation table
  * - Task resource initialization and uninitialization functions
  * - Hooks for run-time logging
  *
  * @{
  */
#ifndef SCIF_H
#define SCIF_H

#include <stdint.h>
#include <stdbool.h>
#include "scif_framework.h"
#include "scif_osal_tirtos.h"


/// Target chip name
#define SCIF_TARGET_CHIP_NAME_CC2650
/// Target chip package
#define SCIF_TARGET_CHIP_PACKAGE_QFN48_7X7_RGZ

/// Number of tasks implemented by this driver
#define SCIF_TASK_COUNT 2

/// cvTask: Task ID
#define SCIF_CV_TASK_TASK_ID 0
/// sampleADC: Task ID
#define SCIF_SAMPLE_ADC_TASK_ID 1


/// cvTask: LMP I2C Address
#define SCIF_CV_TASK_LMP_I2C_ADDR 144
/// cvTask: Address of LMP LOCK Register. Locks writing to TIACN and REFCN registers.
#define SCIF_CV_TASK_LMP_LOCK_REG_ADDR 1
/// cvTask: Address of MODECN register. Configures operating mode of LMP.
#define SCIF_CV_TASK_LMP_MODECN_REG_ADDR 18
/// cvTask: Address of REFCN register. Configures Internal Zero, Bias, and Reference Source.
#define SCIF_CV_TASK_LMP_REFCN_REG_ADDR 17
/// cvTask: Address of LMP STATUS Register. Indicates power-on status.
#define SCIF_CV_TASK_LMP_STATUS_REG_ADDR 0
/// cvTask: Address of TIACN register. Configures Internal TIA Gain and Rload.
#define SCIF_CV_TASK_LMP_TIACN_REG_ADDR 16
/// cvTask I/O mapping: I2C SCL
#define SCIF_CV_TASK_DIO_I2C_SCL 4
/// cvTask I/O mapping: I2C SDA
#define SCIF_CV_TASK_DIO_I2C_SDA 28
/// sampleADC I/O mapping: Input to ADC 
#define SCIF_SAMPLE_ADC_DIO_A_ADC_IN 27


// All shared data structures in AUX RAM need to be packed
#pragma pack(push, 2)


/// cvTask: Task configuration structure
typedef struct {
    uint16_t TaskSelection; ///< 0 means CV task and 1 means CA task
    uint16_t internalGain;  ///< 
    uint16_t rtcPeriod;     ///< 
    uint16_t rtcPeriodCA;   ///< rtc period for CA task
    uint16_t weSelect;      ///< WE Selection Signalp
} SCIF_CV_TASK_CFG_T;


/// cvTask: Task state structure
typedef struct {
    uint16_t CAstate;        ///< 0: 24% Vref , 1: 0% Vref, 2: shotdownCAtask
    uint16_t biasStep;       ///< Step value of internal bias from 2% - 24% (increment by 2)
    uint16_t biasStepFlag;   ///< 
    uint16_t i2cStatus;      ///< I2C master status
    uint16_t lmpState;       ///< State of LMP
    uint16_t refcnRegValue;  ///< REFCN value
    uint16_t shotDownCVtask; ///< 
} SCIF_CV_TASK_STATE_T;


/// sampleADC: Task output data structure
typedef struct {
    uint16_t adcValue; ///< Sampled output value of the ADC
} SCIF_SAMPLE_ADC_OUTPUT_T;


/// Sensor Controller task data (configuration, input buffer(s), output buffer(s) and internal state)
typedef struct {
    struct {
        SCIF_CV_TASK_CFG_T cfg;
        SCIF_CV_TASK_STATE_T state;
    } cvTask;
    struct {
        SCIF_SAMPLE_ADC_OUTPUT_T output;
    } sampleAdc;
} SCIF_TASK_DATA_T;

/// Sensor Controller task generic control (located in AUX RAM)
#define scifTaskData    (*((volatile SCIF_TASK_DATA_T*) 0x400E00F2))


// Initialized internal driver data, to be used in the call to \ref scifInit()
extern const SCIF_DATA_T scifDriverSetup;


// Restore previous struct packing setting
#pragma pack(pop)


// AUX I/O re-initialization functions
void scifReinitTaskIo(uint32_t bvTaskIds);


// RTC-based tick generation control
void scifStartRtcTicks(uint32_t tickStart, uint32_t tickPeriod);
void scifStartRtcTicksNow(uint32_t tickPeriod);
void scifStopRtcTicks(void);


#endif
//@}


// Generated by DESKTOP-2MAQ27I at 2019-08-29 15:32:51.881
